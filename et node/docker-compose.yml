name: et-node
services:
  kafka-controller:
    image: confluentinc/cp-kafka
    container_name: kafka-controller
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      CLUSTER_ID: "DIGITAL_TWINS_ET"
    ports:
      - "9093:9093"
    networks:
      - et-network
    volumes:
      - kafka-controller-data:/var/lib/kafka
      - kafka-controller-secrets:/etc/kafka/secrets
      - kafka-controller-logs:/var/lib/kafka/data
   
  kafka-broker:
    image: confluentinc/cp-kafka
    container_name: kafka-broker
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9091
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker:9092,EXTERNAL://host.docker.internal:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:SASL_SSL,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "DIGITAL_TWINS_ET"
      # SSL Configuration
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${TRUSTSTORE_PASSWORD}
      # SASL Configuration
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/secrets/jaas.conf"
    ports:
      - "9092:9092" #Internal comunication (no security)
      - "9091:9091" #Encrypted and authenticated external comunication
    networks:
      - et-network
    volumes:
      - kafka-broker-data:/var/lib/kafka
      - ./secrets:/etc/kafka/secrets
      - kafka-broker-logs:/var/lib/kafka/data
    depends_on:
      - kafka-controller
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka-broker:9092" ]
      start_period: 20s
      interval: 5s
      timeout: 30s
      retries: 5
  
  pulse-to-kafka:
    build:
      context: ./pulse-to-kafka
    container_name: pulse-to-kafka
    networks:
      - et-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      ZMQ_SERVER: ${ZMQ_SERVER}
    depends_on:
      kafka-broker:
        condition: service_healthy
  fhir-standardizer:
    container_name: fhir-standardizer
    build:
      context: ./fhir-standardizer
    environment:
      KEYCLOAK_BASE_URL: ${KEYCLOAK_BASE_URL}
      REALM: ${REALM}
      UPLOAD_CLIENT_ID: ${UPLOAD_CLIENT_ID}
      UPLOAD_CLIENT_SECRET: ${UPLOAD_CLIENT_SECRET}
      FHIR_SERVER: ${FHIR_SERVER}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
    networks:
      - et-network
    depends_on:
      kafka-broker:
        condition: service_healthy
        
networks:
  et-network:
  
volumes:
  kafka-broker-data:
    name: kafka-broker-data
  kafka-broker-secrets:
    name: kafka-broker-secrets
  kafka-broker-logs:
    name: kafka-broker-logs
  kafka-controller-data:
    name: kafka-controller-data
  kafka-controller-secrets:
    name: kafka-controller-secrets
  kafka-controller-logs:
    name: kafka-controller-logs